 You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
 //given array  7 1 5 3 4 6
 o/p- 5
 
 // The approach will be to keep the track of the minimum element and simulataneously find the difference of it from the curr element while traversing through the vector
 
  int maxProfit(vector<int>& v) {
        int minimal=v[0];
        int dif=INT_MIN;
        for(int i=0;i<v.size();i++)
        {
            minimal= min(v[i],minimal);
            dif= max(dif,v[i]-minimal);
        }
        if(dif==INT_MIN) dif=0;
        return dif;
    }
    /****************************************************************/
 calculating max from right side  7 6 6 6 6 6
 now subtract 2nd array/vector from first and print max diff as max profit
 //TC - O(n)
 
 int maxProfit(vector<int>& v) {
         int n=v.size();
        vector<int>v1(n,0);
        int maximum=v[n-1];
        for(int i=n-1;i>=0;i--)
        {
            maximum = max(v[i],maximum);
            v1[i]=maximum;
        }
        int ans=0;
        for(int i=0;i<n;i++){
            v[i]=v1[i]-v[i];
            ans=max(ans,v[i]);
        }
        return ans;
    }
    
    /********************************************************************************/
    // can track the max and min from starting for further optimization
    
    class Solution {
public:
    int maxProfit(vector<int>& v) {
       int maxProft=0;
        int  minSoFar=v[0];
        for(int i=0;i<v.size();i++)
        {
            minSoFar = min(minSoFar, v[i]);
            maxProft= max(maxProft, v[i]-minSoFar);
        }
        return maxProft;
    }
};
