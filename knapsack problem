Input : 
wt[] : 1 2 3 4
val[] : 4 5 6 7
w=7


int knapSack(int w, int wt[], int val[], int n)
{
    //vector<vector<int>> K(n + 1, vector<int>(W + 1));
    vector<vector<int>> dp(n+1, vector<int>(w+1));
	for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=w;j++)
        {
            if(i==0||j==0) 
             dp[i][j]=0;
            else if(wt[i-1]<=w)
            {
                dp[i][j]= max(dp[i-1][j-wt[i-1]]+val[i-1],dp[i-1][j]);
            }
            else{
            dp[i][j] = dp[i-1][j];}
        }
       
    }
     return dp[n][w];
}

/***********************************************************************************************************************/
int knapSack(int w, int wt[], int val[], int n) 
    { 
        int dp[n+1][w+1];
       // Your code here
      //  n---> i  , w--->j;
       for(int i=0;i<=n;i++)
       {
           for(int j=0;j<=w;j++)
           {
               if(i==0 || j==0)
               dp[i][j]=0;
           }
       }
       for(int i=1;i<=n;i++)
       {
           for(int j=1;j<=w;j++)
           {
           if(wt[i-1]<=j)
           {
               //include
               dp[i][j]= max(val[i-1]+dp[i-1][j- wt[i-1]],dp[i-1][j]);
           }
           else
           {
               //exclude
               dp[i][j]= dp[i-1][j];
           }
           }
       }
       return dp[n][w];
    }
